"""Add role and permission permissions

Revision ID: fdd52eb6ac0f
Revises: eb10bd857c49
Create Date: 2020-11-15 21:02:15.110045

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = 'fdd52eb6ac0f'
down_revision = 'eb10bd857c49'
branch_labels = None
depends_on = None

permissions = [
    {"name": "LOGIN_ROLE_CREATE"},
    {"name": "LOGIN_ROLE_READ"},
    {"name": "LOGIN_ROLE_UPDATE"},
    {"name": "LOGIN_ROLE_DELETE"},
    {"name": "LOGIN_PERMISSION_CREATE"},
    {"name": "LOGIN_PERMISSION_READ"},
    {"name": "LOGIN_PERMISSION_UPDATE"},
    {"name": "LOGIN_PERMISSION_DELETE"},
]

roles = [
    {"name": "Admin"},
]


def lookup_role_id(name):
    conn = op.get_bind()
    res = conn.execute("SELECT id FROM role WHERE name like '%s'" % name)
    res = res.fetchone()
    if res is not None:
        return res['id']
    return None


def lookup_permission_id(name):
    conn = op.get_bind()
    res = conn.execute("SELECT id FROM permission WHERE name like '%s'" % name)
    res = res.fetchone()
    if res is not None:
        return res['id']
    return None


def lookup_role_permission_id(rid, pid):
    conn = op.get_bind()
    res = conn.execute(
        "SELECT role_id, permission_id FROM role_permission WHERE role_id = %s AND permission_id = %s" % (rid, pid))
    res = res.fetchone()
    if res is not None:
        return res
    return None


def prepare_insert_permissions():
    permission_insert_data = []
    for entry in permissions:
        pid = lookup_permission_id(entry['name'])
        if pid is None:
            permission_insert_data.append(entry)
    return permission_insert_data


def prepare_role_permission():
    rid = lookup_role_id("Admin")
    role_permission_insert_data = []
    for entry in permissions:
        pid = lookup_permission_id(entry['name'])
        rpid = lookup_role_permission_id(rid, pid)
        if rpid is None:
            role_permission_insert_data.append({
                "role_id": rid,
                "permission_id": pid
            })
    return role_permission_insert_data


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # define tables
    permission_table = sa.sql.table(
        'permission',
        sa.sql.column("name", sa.String),
    )
    role_permission_table = sa.sql.table(
        'role_permission',
        sa.sql.column("role_id", sa.Integer),
        sa.sql.column("permission_id", sa.Integer),
    )

    # insert permissions
    _permissions = prepare_insert_permissions()
    op.bulk_insert(permission_table, _permissions)

    # insert role_permission, admin user only
    _role_permissions = prepare_role_permission()
    if len(_role_permissions) > 0:
        op.bulk_insert(
            role_permission_table,
            _role_permissions
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
